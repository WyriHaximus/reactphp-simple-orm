name: Continuous Integration
on:
  push:
    branches:
      - 'main'
      - 'master'
      - 'refs/heads/v[0-9]+.[0-9]+.[0-9]+'
  pull_request:
jobs:
  supported-versions-matrix:
    name: Supported Versions Matrix
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.supported-versions-matrix.outputs.version }}
    steps:
      - uses: actions/checkout@v1
      - id: supported-versions-matrix
        uses: WyriHaximus/github-action-composer-php-versions-in-range@v1
  supported-checks-matrix:
    name: Supported Checks Matrix
    runs-on: ubuntu-latest
    needs:
      - composer-install
    outputs:
      check: ${{ steps.supported-checks-matrix.outputs.check }}
    steps:
      - uses: actions/checkout@v1
      - id: supported-checks-matrix
        name: Generate check
        run: |
          printf "Checks found: %s\r\n" $(make task-list-ci)
          printf "::set-output name=check::%s" $(make task-list-ci)
  composer-install:
    strategy:
      fail-fast: false
      matrix:
        php: ${{ fromJson(needs.supported-versions-matrix.outputs.version) }}
        composer: [lowest, current, highest]
    needs:
      - supported-versions-matrix
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/wyrihaximusnet/php:${{ matrix.php }}-nts-buster-dev-root
    steps:
      - uses: actions/checkout@v1
      - name: Cache composer packages
        uses: actions/cache@v1
        with:
          path: ./vendor/
          key: ${{ matrix.composer }}-${{ matrix.php }}-${{ hashFiles('**/composer.lock') }}
      - name: Install Dependencies
        run: composer update --prefer-lowest --no-progress --ansi --no-interaction --prefer-dist -o
        if: matrix.composer == 'lowest'
      - name: Install Dependencies
        run: composer install --ansi --no-progress --no-interaction --prefer-dist -o
        if: matrix.composer == 'current'
      - name: Install Dependencies
        run: composer update --ansi --no-progress --no-interaction --prefer-dist -o
        if: matrix.composer == 'highest'
  qa:
    services:
      postgres:
        image: postgres:${{ matrix.postgres }}
        env:
          POSTGRES_PASSWORD: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    name: Run ${{ matrix.check }} on PHP ${{ matrix.php }} with ${{ matrix.composer }} dependency preference against Postgres ${{ matrix.postgres }}
    strategy:
      fail-fast: false
      matrix:
        php: ${{ fromJson(needs.supported-versions-matrix.outputs.version) }}
        postgres: [12, 13]
        composer: [lowest, current, highest]
        check: ${{ fromJson(needs.supported-checks-matrix.outputs.check) }}
    needs:
      - composer-install
      - supported-checks-matrix
      - supported-versions-matrix
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/wyrihaximusnet/php:${{ matrix.php }}-nts-buster-dev-root
    steps:
      - uses: actions/checkout@v1
      - name: Cache composer packages
        uses: actions/cache@v1
        with:
          path: ./vendor/
          key: ${{ matrix.composer }}-${{ matrix.php }}-${{ hashFiles('**/composer.lock') }}
      - name: Install Dependencies
        run: (test -f vendor && true ) || composer update --prefer-lowest --no-progress --ansi --no-interaction --prefer-dist -o
        if: matrix.composer == 'lowest'
      - name: Install Dependencies
        run: (test -f vendor && true ) || composer install --ansi --no-progress --no-interaction --prefer-dist -o
        if: matrix.composer == 'current'
      - name: Install Dependencies
        run: (test -f vendor && true ) || composer update --ansi --no-progress --no-interaction --prefer-dist -o
        if: matrix.composer == 'highest'
      - name: Fetch Tags
        run: git fetch --depth=1 origin +refs/tags/*:refs/tags/* || true
        if: matrix.check == 'backward-compatibility-check'
      - run: mv .env.github-actions .env
      - run: export $(cat .env | tr -d '\r' | xargs) && make install_db
      - run: export $(cat .env | tr -d '\r' | xargs) && make ${{ matrix.check }}
        env:
          COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}
          COVERALLS_RUN_LOCALLY: ${{ secrets.COVERALLS_RUN_LOCALLY }}
  check-mark:
    name: ✔️
    needs:
      - qa
    runs-on: ubuntu-latest
    steps:
      - run: echo "✔️"
